{"version":3,"sources":["meanie-angular-key-codes.min.js","key-codes.service.js"],"names":["window","angular","undefined","module","factory","BACKSPACE","TAB","CLEAR","ENTER","ESC","SPACE","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","INSERT","DELETE","SHIFT","CTRL","ALT","BREAK","CAPSLOCK","CMDLEFT","CMDRIGHT","COMMA","COLON","DASH","EQUALS","QUOTE","BACK_TICK","NUMERIC","ALPHA","CONTROL","isControl","event","allowed","codes","this","mergeCodes","indexOf","keyCode","charCode","isNumeric","which","isAlpha","isAlphaNumeric","i","arguments","length","merge","isArray","concat"],"mappings":"CAMA,SAAWA,EAAQC,EAASC,GCD5B,YDQED,GCFAE,OAAO,uBDONC,QCFC,YAAW,WDGX,OAGEC,UAAW,EACXC,IAAK,ECDPC,MAAA,GACAC,MAAA,GACAC,IAAW,GACXC,MAAW,GAGXC,OAAW,GACXC,SAAW,GACXC,IAAA,GACAC,KAAW,GAGXC,KAAA,GACAC,GAAA,GDGEC,MAAO,GACPC,KAAM,GCCRC,OAAW,GACXC,OAAW,GAGXC,MAAA,GDGEC,KAAM,GACNC,IAAK,GCDPC,MAAY,GACZC,SAAY,GACZC,QAAY,GACZC,SAAY,GDKVC,MAAO,IACPC,MAAO,ICDTC,KAAA,IDGEC,OAAQ,IACRC,MAAO,ICCTC,UACE,IDEAC,SAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,ICM9CC,OAAQ,GAAI,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GDFZ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhDC,SAAU,EAAG,EAAG,GAAI,GAAI,GCK1B,GAAA,GAAA,GAhEK,GD6DH,GCIA,GAAI,GAAA,IDCJC,UAAW,SAAmBC,EAAOC,GACnC,GAAIC,GAAQC,KAAKC,WAAWD,KAAKL,QAASG,EAC1C,OAAOC,GAAMG,QAAQL,EAAMM,UAAY,GAAwB,IAAnBN,EAAMO,UAOpDC,UAAW,SAAmBR,EAAOC,GACnC,GAAIC,GAAQC,KAAKC,WAAWD,KAAKP,QAASK,EAC1C,OAAOC,GAAMG,QAAQL,EAAMS,QAAU,GAOvCC,QAAS,SAAiBV,EAAOC,GAC/B,GAAIC,GAAQC,KAAKC,WAAWD,KAAKN,MAAOI,EACxC,OAAOC,GAAMG,QAAQL,EAAMS,QAAU,GAOvCE,eAAgB,SAAwBX,EAAOC,GAC7C,GAAIC,GAAQC,KAAKC,WAAWD,KAAKN,MAAOM,KAAKP,QAASK,EACtD,OAAOC,GAAMG,QAAQL,EAAMS,QAAU,GAOvCL,WCAM,WDEJ,ICAE,GDDEF,MCCFU,EAAQ,EAAAA,EAAMC,UAAOC,OAAAF,IDCrB,GAAIC,UAAUD,GAAI,CAChB,GAAIG,GAAQF,UAAUD,ECCrBjD,GAAAqD,QAAAD,KDCCA,GAASA,IAEXb,EAAQA,EAAMe,OAAOF,GAGzB,MAAOb,QAIZxC,OAAQA,OAAOC","file":"meanie-angular-key-codes.min.js","sourcesContent":["/**\n * meanie-angular-key-codes * https://github.com/meanie/angular-key-codes\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('KeyCodes.Service', [])\n\n  /**\n   * Constant definition\n   */\n  .factory('$keyCodes', function () {\n    return {\n\n      //Basic\n      BACKSPACE: 8,\n      TAB: 9,\n      CLEAR: 12,\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n\n      //Navigation\n      PAGEUP: 33,\n      PAGEDOWN: 34,\n      END: 35,\n      HOME: 36,\n\n      //Arrows\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      DOWN: 40,\n\n      //Insert/delete\n      INSERT: 45,\n      DELETE: 46,\n\n      //Modifiers\n      SHIFT: 16,\n      CTRL: 17,\n      ALT: 18,\n      BREAK: 19,\n      CAPSLOCK: 20,\n      CMDLEFT: 91,\n      CMDRIGHT: 93,\n\n      //Special characters\n      COMMA: 188,\n      COLON: 190,\n      DASH: 189,\n      EQUALS: 187,\n      QUOTE: 222,\n      BACK_TICK: 192,\n\n      //Numeric keys (character codes)\n      NUMERIC: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57],\n\n      //Alpha keys (character codes)\n      ALPHA: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, //a-m\n      78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n\n      //Control keys\n      CONTROL: [8, 9, 12, 13, 27, //backspace, tab, clear, enter, escape\n      35, 36, 45, 46, //end, home, insert, delete\n      37, 38, 39, 40],\n\n      /**\n       * Helper to check if a keyboard event was for a control key\n       */\n      isControl: function isControl(event, allowed) {\n        var codes = this.mergeCodes(this.CONTROL, allowed);\n        return codes.indexOf(event.keyCode) >= 0 && event.charCode === 0;\n      },\n\n\n      /**\n       * Helper to check if a keyboard event was for numeric input\n       */\n      isNumeric: function isNumeric(event, allowed) {\n        var codes = this.mergeCodes(this.NUMERIC, allowed);\n        return codes.indexOf(event.which) >= 0;\n      },\n\n\n      /**\n       * Helper to check if a keyboard event was for alpha input\n       */\n      isAlpha: function isAlpha(event, allowed) {\n        var codes = this.mergeCodes(this.ALPHA, allowed);\n        return codes.indexOf(event.which) >= 0;\n      },\n\n\n      /**\n       * Helper to check if a keyboard event was for alphanumeric input\n       */\n      isAlphaNumeric: function isAlphaNumeric(event, allowed) {\n        var codes = this.mergeCodes(this.ALPHA, this.NUMERIC, allowed);\n        return codes.indexOf(event.which) >= 0;\n      },\n\n\n      /**\n       * Internal helper to merge codes\n       */\n      mergeCodes: function mergeCodes() {\n        var codes = [];\n        for (var i = 0; i < arguments.length; i++) {\n          if (arguments[i]) {\n            var merge = arguments[i];\n            if (!angular.isArray(merge)) {\n              merge = [merge];\n            }\n            codes = codes.concat(merge);\n          }\n        }\n        return codes;\n      }\n    };\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('KeyCodes.Service', [])\n\n/**\n * Constant definition\n */\n.factory('$keyCodes', function() {\n  return {\n\n    //Basic\n    BACKSPACE: 8,\n    TAB:       9,\n    CLEAR:     12,\n    ENTER:     13,\n    ESC:       27,\n    SPACE:     32,\n\n    //Navigation\n    PAGEUP:    33,\n    PAGEDOWN:  34,\n    END:       35,\n    HOME:      36,\n\n    //Arrows\n    LEFT:      37,\n    UP:        38,\n    RIGHT:     39,\n    DOWN:      40,\n\n    //Insert/delete\n    INSERT:    45,\n    DELETE:    46,\n\n    //Modifiers\n    SHIFT:     16,\n    CTRL:      17,\n    ALT:       18,\n    BREAK:     19,\n    CAPSLOCK:  20,\n    CMDLEFT:   91,\n    CMDRIGHT:  93,\n\n    //Special characters\n    COMMA:      188,\n    COLON:      190,\n    DASH:       189,\n    EQUALS:     187,\n    QUOTE:      222,\n    BACK_TICK:  192,\n\n    //Numeric keys (character codes)\n    NUMERIC: [\n      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, //0-9\n    ],\n\n    //Alpha keys (character codes)\n    ALPHA: [\n      65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, //a-m\n      78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, //n-z\n    ],\n\n    //Control keys\n    CONTROL: [\n      8, 9, 12, 13, 27, //backspace, tab, clear, enter, escape\n      35, 36, 45, 46,   //end, home, insert, delete\n      37, 38, 39, 40,   //left, up, right, down\n    ],\n\n    /**\n     * Helper to check if a keyboard event was for a control key\n     */\n    isControl(event, allowed) {\n      let codes = this.mergeCodes(this.CONTROL, allowed);\n      return (codes.indexOf(event.keyCode) >= 0 && event.charCode === 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for numeric input\n     */\n    isNumeric(event, allowed) {\n      let codes = this.mergeCodes(this.NUMERIC, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for alpha input\n     */\n    isAlpha(event, allowed) {\n      let codes = this.mergeCodes(this.ALPHA, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for alphanumeric input\n     */\n    isAlphaNumeric(event, allowed) {\n      let codes = this.mergeCodes(this.ALPHA, this.NUMERIC, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Internal helper to merge codes\n     */\n    mergeCodes() {\n      let codes = [];\n      for (let i = 0; i < arguments.length; i++) {\n        if (arguments[i]) {\n          let merge = arguments[i];\n          if (!angular.isArray(merge)) {\n            merge = [merge];\n          }\n          codes = codes.concat(merge);\n        }\n      }\n      return codes;\n    },\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}