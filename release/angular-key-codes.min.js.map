{"version":3,"sources":["key-codes.service.js"],"names":["angular","module","CLEAR","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","INSERT","DELETE","ALT","BREAK","CMDRIGHT","COMMA","COLON","DASH","EQUALS","COMBINED","NUMERIC","ALPHA","isControl","codes","merge","concat"],"mappings":"iBAKAA,eAMEC,OAAO,+BAKLC,YAAW,oCAMXC,MAAAA,GACAC,MAAAA,GACAC,IAAW,GACXC,MAAW,GAGXC,OAAW,GACXC,SAAW,GACXC,IAAAA,GACAC,KAAW,GAGXC,KAAAA,GACAC,GAAAA,oBAKAC,OAAW,GACXC,OAAW,GAGXC,MAAAA,kBAGAC,MAAY,GACZC,SAAY,GACZC,QAAY,GACZC,SAAY,uBAKZC,KAAAA,yBAGAC,UACE,IAIFC,SACE,4CAQAA,OAAQ,GAAI,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,iEAMdC,GAAAA,GAAAA,GAnEK,MAoEH,GAAIC,GAAAA,6XAqCEC,eAEFD,SAAAA,EAAQA,EAAAA,EAAME,UAAOD,OAAAA,wCAGlBD,EAAAA,QAAAA","file":"angular-key-codes.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('KeyCodes.Service', [])\n\n/**\n * Constant definition\n */\n.factory('$keyCodes', function() {\n  return {\n\n    //Basic\n    BACKSPACE: 8,\n    TAB:       9,\n    CLEAR:     12,\n    ENTER:     13,\n    ESC:       27,\n    SPACE:     32,\n\n    //Navigation\n    PAGEUP:    33,\n    PAGEDOWN:  34,\n    END:       35,\n    HOME:      36,\n\n    //Arrows\n    LEFT:      37,\n    UP:        38,\n    RIGHT:     39,\n    DOWN:      40,\n\n    //Insert/delete\n    INSERT:    45,\n    DELETE:    46,\n\n    //Modifiers\n    SHIFT:     16,\n    CTRL:      17,\n    ALT:       18,\n    BREAK:     19,\n    CAPSLOCK:  20,\n    CMDLEFT:   91,\n    CMDRIGHT:  93,\n\n    //Special characters\n    COMMA:      188,\n    COLON:      190,\n    DASH:       189,\n    EQUALS:     187,\n    QUOTE:      222,\n    BACK_TICK:  192,\n\n    //Combined character keycode\n    COMBINED:   229,\n\n    //Numeric keys (character codes)\n    NUMERIC: [\n      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, //0-9\n    ],\n\n    //Alpha keys (character codes)\n    ALPHA: [\n      65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, //a-m\n      78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, //n-z\n    ],\n\n    //Control keys\n    CONTROL: [\n      8, 9, 12, 13, 27, //backspace, tab, clear, enter, escape\n      35, 36, 45, 46,   //end, home, insert, delete\n      37, 38, 39, 40,   //left, up, right, down\n    ],\n\n    /**\n     * Helper to check if a keyboard event was for a control key\n     */\n    isControl(event, allowed) {\n      let codes = this.mergeCodes(this.CONTROL, allowed);\n      return (codes.indexOf(event.keyCode) >= 0 && event.charCode === 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for numeric input\n     */\n    isNumeric(event, allowed) {\n      let codes = this.mergeCodes(this.NUMERIC, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for alpha input\n     */\n    isAlpha(event, allowed) {\n      let codes = this.mergeCodes(this.ALPHA, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Helper to check if a keyboard event was for alphanumeric input\n     */\n    isAlphaNumeric(event, allowed) {\n      let codes = this.mergeCodes(this.ALPHA, this.NUMERIC, allowed);\n      return (codes.indexOf(event.which) >= 0);\n    },\n\n    /**\n     * Internal helper to merge codes\n     */\n    mergeCodes() {\n      let codes = [];\n      for (let i = 0; i < arguments.length; i++) {\n        if (arguments[i]) {\n          let merge = arguments[i];\n          if (!angular.isArray(merge)) {\n            merge = [merge];\n          }\n          codes = codes.concat(merge);\n        }\n      }\n      return codes;\n    },\n  };\n});\n\n})(window, window.angular);\n"]}